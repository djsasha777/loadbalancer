---
- name: install nebula
  hosts: server
  vars:
    ansible_user: root
  tasks:

    - name: Enable sysctl ip_forwarding
      sysctl:
        name: net.ipv4.ip_forward
        value: "1"
        state: present

    - name: Create nebula config directory
      ansible.builtin.file:
        path: "{{ nebula.dir }}"
        state: directory
        mode: "0755"

    - name: Download nebula
      ansible.builtin.get_url:
        url: "{{ nebula.url }}"
        dest: "{{ nebula.dir }}/nebula.tar.gz"
        mode: "0644"

    - name: Unarchive nebula
      ansible.builtin.unarchive:
        src: "{{ nebula.dir }}/nebula.tar.gz"
        dest: "{{ nebula.dir }}"
        remote_src: true

    - name: Create nebula CA cert
      ansible.builtin.command:
        cmd: >-
          {{ nebula.dir }}/nebula-cert ca
          -name "{{ nebula.caName }}"
          -duration {{ nebula.duration }}
          -out-key "{{ nebula.dir }}/ca.key"
          -out-crt "{{ nebula.dir }}/ca.crt"
        creates: "{{ nebula.dir }}/ca.key"

    - name: Create nebula certs for clients
      ansible.builtin.command:
        cmd: >-
          {{ nebula.dir }}/nebula-cert sign
          -name "{{ item.key }}"
          -ip "{{ item.value.ip | mandatory }}"
          -ca-key "{{ nebula.dir }}/ca.key"
          -ca-crt "{{ nebula.dir }}/ca.crt"
          -out-key "{{ nebula.dir }}/{{ item.key }}.key"
          -out-crt "{{ nebula.dir }}/{{ item.key }}.crt"
        creates: "{{ nebula.dir }}/{{ item.key }}.crt"
      loop: "{{ nebula.clients | dict2items }}"

    - name: Template nebula config
      template: 
        src: templates/nebula.yaml.j2 
        dest: "{{ nebula.dir }}/config.yaml"
        mode: "0644"

    - name: Template nebula systemd unit
      template:
        src: nebula.service.j2
        dest: "/etc/systemd/system/nebula.service"
        mode: "0644"

    - name: Ensure nebula is started
      service:  
        name: nebula
        state: started
        enabled: yes

    - name: Ensure nebula is started
      service:  
        name: nebula
        state: restarted
        enabled: yes
- name: install haproxy
  hosts: server
  vars:
    ansible_user: root
  tasks:

    - name: apt update
      ansible.builtin.apt:
        update_cache: yes

    - name: install packages
      ansible.builtin.apt:
        name:
          - haproxy
          - nano
        state: present

    - name: Ensure haproxy conf is set
      template: 
        src: templates/haproxy.cfg.j2 
        dest: /etc/haproxy/haproxy.cfg

    - name: Ensure haproxy is started
      service:  
        name: haproxy
        state: restarted
        enabled: yes

- name: install openconnect
  hosts: server
  vars:
    ansible_user: root
  tasks:

    - name: apt update
      ansible.builtin.apt:
        update_cache: yes

    - name: install packages
      ansible.builtin.apt:
        name:
          - gnutls-bin
          - apache2-utils
          - ocserv
        state: present

    - name: Create openconnect config directory
      ansible.builtin.file:
        path: "/etc/openconnect"
        state: directory
        mode: "0755"

    - name: template ca
      template: 
        src: templates/oc.ca.tmpl.j2
        dest: /etc/openconnect/oc.ca.tmpl

    - name: Ensure openconnect conf is set
      template: 
        src: templates/oc.server.tmpl.j2
        dest: /etc/openconnect/oc.server.tmpl

    - name: Create ca key
      ansible.builtin.command:
        cmd: >-
          certtool --generate-privkey --outfile /etc/openconnect/ca-key.pem
        creates: "/etc/openconnect/ca-key.pem"

    - name: Create ca cert
      ansible.builtin.command:
        cmd: >-
          certtool --generate-self-signed --load-privkey /etc/openconnect/ca-key.pem --template /etc/openconnect/oc.ca.tmpl --outfile /etc/openconnect/ca-cert.pem
        creates: "/etc/openconnect/ca-cert.pem"

    - name: Create server key
      ansible.builtin.command:
        cmd: >-
          certtool --generate-privkey --outfile /etc/openconnect/server-key.pem
        creates: "/etc/openconnect/server-key.pem"

    - name: Create server cert
      ansible.builtin.command:
        cmd: >-
          certtool --generate-certificate --load-privkey /etc/openconnect/server-key.pem --load-ca-certificate /etc/openconnect/ca-cert.pem --load-ca-privkey /etc/openconnect/ca-key.pem --template /etc/openconnect/oc.server.tmpl --outfile /etc/openconnect/server-cert.pem
        creates: "/etc/openconnect/server-cert.pem"

    - name: Create passwd
      ansible.builtin.command:
        cmd: >-
          htpasswd -b -c /etc/openconnect/passwd openconnect {{ ocpasswd }}
        creates: "/etc/openconnect/passwd"

    - name: template config
      template: 
        src: templates/oc.config.j2
        dest: /etc/ocserv/ocserv.conf

    - name: Ensure openconnect is started
      service:  
        name: ocserv
        state: stopped
        enabled: yes

    - name: Ensure openconnect is started
      service:  
        name: ocserv
        state: started
        enabled: yes

- name: install shadowsocks
  hosts: server
  vars:
    ansible_user: root
  tasks:

    - name: apt update
      ansible.builtin.apt:
        update_cache: yes

    - name: install packages
      ansible.builtin.apt:
        name:
          - shadowsocks-libev
        state: present

    - name: Ensure shadowsocks conf is set
      template: 
        src: templates/ss.config.json.j2 
        dest: /etc/shadowsocks-libev/config.json

    - name: Ensure shadowsocks is started
      service:  
        name: shadowsocks-libev
        state: restarted
        enabled: yes
